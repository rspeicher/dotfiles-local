" Remove default plugins from thoughtbot/dotfiles
UnPlug "ctrlp.vim"
UnPlug "syntastic"
UnPlug "tComment"

Plug 'airblade/vim-gitgutter'
Plug 'AndrewRadev/deleft.vim'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/switch.vim'
Plug 'bling/vim-airline'
Plug 'christoomey/vim-tmux-runner'
Plug 'endel/vim-github-colorscheme'
Plug 'ervandew/supertab'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/vim-easy-align'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-user'
Plug 'lervag/file-line'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'SirVer/ultisnips'
Plug 'tomasr/molokai'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-unimpaired'
Plug 'tsigo/vim-dependencywtf'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'yegappan/greplace'

" Language support
Plug 'chase/vim-ansible-yaml'
Plug 'Keithbsmiley/swift.vim'
Plug 'mutewinter/nginx.vim'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-git'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-markdown'

if has('mac')
  Plug 'rizzatti/dash.vim'
  nmap <silent> <Leader>* <Plug>DashSearch
endif

" bling/vim-airline
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#tab_nr_type = 2
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#show_close_button = 0

" christoomey/vim-tmux-runner
    map <Leader>ra :VtrAttachToPane<CR>
    map <Leader>rl :VtrSendLinesToRunner<CR>

" junegunn/rainbow_parentheses.vim
    augroup rainbow_parens
      autocmd!
      autocmd FileType ruby RainbowParentheses
    augroup END

" junegunn/fzf.vim
    nmap <c-p> :Files<CR>
    map <Leader>b :Buffers<CR>
    map <Leader>g :Tags<CR>

    " Start Files scoped to the current file's directory
    map <Leader>e :Files <C-R>=expand("%:h")<CR><CR>

    " Files scoped to various Rails directories
    autocmd User Rails map <Leader>c :Files app/controllers/<cr>
    autocmd User Rails map <Leader>h :Files app/helpers/<cr>
    autocmd User Rails map <Leader>j :Files app/assets/javascripts/<cr>
    autocmd User Rails map <Leader>S :Files app/assets/stylesheets/<cr>
    autocmd User Rails map <Leader>m :Files app/models/<cr>
    autocmd User Rails map <Leader>u :Files spec/models/<cr>
    autocmd User Rails map <Leader>v :Files app/views/<cr>

" junegunn/vim-easy-align
    vmap <Enter> <Plug>(EasyAlign)

" ctrlpvim/ctrlp.vim
    " let g:ctrlp_max_depth = 15
    " let g:ctrlp_max_files = 5000
    " let g:ctrlp_open_multiple_files = 't'
    " let g:ctrlp_match_window = 'max:15,results:15'

    " map <Leader>b :CtrlPBuffer<CR>
    " map <Leader>g :CtrlPTag<CR>

    " " Start CtrlP scoped to the current file's directory
    " map <Leader>e :CtrlPCurFile<cr>

    " " CtrlP scoped to various Rails directories
    " autocmd User Rails map <Leader>c :CtrlP app/controllers/<cr>
    " autocmd User Rails map <Leader>h :CtrlP app/helpers/<cr>
    " autocmd User Rails map <Leader>j :CtrlP app/assets/javascripts/<cr>
    " autocmd User Rails map <Leader>S :CtrlP app/assets/stylesheets/<cr>
    " autocmd User Rails map <Leader>m :CtrlP app/models/<cr>
    " autocmd User Rails map <Leader>u :CtrlP spec/models/<cr>
    " autocmd User Rails map <Leader>v :CtrlP app/views/<cr>

" janko-m/vim-test
    let test#strategy = "dispatch"
    let g:test#ruby#rspec#options = {
      \ 'nearest': '--format progress',
      \ 'file':    '--format progress',
      \ 'suite':   '--format progress',
    \}

" AndrewRadev/switch.vim
    nnoremap - :Switch<cr>

" rking/ag.vim
    let g:ag_prg="ag --vimgrep --nogroup --nocolor"

" scrooloose/nerdtree
    " let g:NERDTreeIgnore      = ['\.rbc$', '\~$', '.DS_Store$']
    let g:NERDTreeChDirMode   = 2
    let g:NERDTreeQuitOnOpen  = 1
    let g:NERDTreeMinimalUI   = 1
    let g:NERDTreeDirArrows   = 0
    let g:NERDTreeHijackNetrw = 1
    map <Leader>/ :NERDTreeFind<CR>

    autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

    " Close all open buffers on entering a window if the only
    " buffer that's left is the NERDTree buffer
    function! s:CloseIfOnlyNerdTreeLeft()
      if exists("t:NERDTreeBufName")
        if bufwinnr(t:NERDTreeBufName) != -1
          if winnr("$") == 1
            q
          endif
        endif
      endif
    endfunction

" scrooloose/syntastic
    let g:syntastic_ruby_mri_quiet_messages = {'regex': 'reference to past scope'}
    let g:syntastic_python_flake8_quiet_messages = {
      \'regex': [
        \'line too long',
        \'whitespace'
      \]
    \}

" tpope/vim-dispatch
    map <Leader>dp :Dispatch pry<CR>
    let g:dispatch_compilers = {
      \'bundle exec': '',
      \':./bin/rspec': ''
    \}

" tpope/vim-ragtag
    augroup ragtagCustom
      autocmd BufRead,BufNewFile *.jsx call RagtagInit()
    augroup END

" tpope/vim-rails
    let g:rails_projections = {
      \"app/assets/javascripts/*.js.coffee": {
        \"alternate": ["spec/javascripts/{}_spec.js.coffee"],
        \"command": "javascript",
        \"test": ["spec/javascripts/{}_spec.js.coffee"],
      \},
      \"spec/javascripts/*_spec.js.coffee": {
        \"related": ["spec/javascripts/fixtures/{}.html.haml"],
      \},
    \}

" chase/vim-ansible-yaml
    let g:ansible_options = {'ignore_blank_lines': 0}

" SirVer/ultisnips
    let g:UltiSnipsEditSplit = 'vertical'
    let g:UltiSnipsJumpForwardTrigger = '<c-l>'
    " let g:UltiSnipsJumpBackwardTrigger = ''

" ervandew/supertab
    let g:SuperTabCompleteCase = 'match'

" tpope/fugitive
    autocmd QuickFixCmdPost *grep* cwindow
